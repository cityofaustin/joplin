# Generated by Django 2.2.10 on 2020-03-12 09:25

import base.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('topic_page', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServicePage',
            fields=[
                ('janisbasepagewithtopics_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='topic_page.JanisBasePageWithTopics')),
                ('steps', wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Option Content'))])))], label='Step With Options')), ('step_with_locations', wagtail.core.blocks.StructBlock([('locations_description', wagtail.core.blocks.RichTextBlock(classname='coa-locations-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('locations', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Location', page_type=['location_page.LocationPage'])))], label='Step with locations'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service')),
                ('steps_ar', wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Option Content'))])))], label='Step With Options')), ('step_with_locations', wagtail.core.blocks.StructBlock([('locations_description', wagtail.core.blocks.RichTextBlock(classname='coa-locations-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('locations', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Location', page_type=['location_page.LocationPage'])))], label='Step with locations'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('steps_en', wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Option Content'))])))], label='Step With Options')), ('step_with_locations', wagtail.core.blocks.StructBlock([('locations_description', wagtail.core.blocks.RichTextBlock(classname='coa-locations-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('locations', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Location', page_type=['location_page.LocationPage'])))], label='Step with locations'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('steps_es', wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Option Content'))])))], label='Step With Options')), ('step_with_locations', wagtail.core.blocks.StructBlock([('locations_description', wagtail.core.blocks.RichTextBlock(classname='coa-locations-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('locations', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Location', page_type=['location_page.LocationPage'])))], label='Step with locations'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('steps_vi', wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'], label='Option Content'))])))], label='Step With Options')), ('step_with_locations', wagtail.core.blocks.StructBlock([('locations_description', wagtail.core.blocks.RichTextBlock(classname='coa-locations-description', features=['ul', 'link', 'code', 'rich-text-button-link', 'document-link'])), ('locations', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Location', page_type=['location_page.LocationPage'])))], label='Step with locations'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('dynamic_content', wagtail.core.fields.StreamField([('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock()), ('recollect_block', base.blocks.RecollectBlock())], blank=True, verbose_name='Add any maps or apps that will help the resident use the service')),
                ('additional_content', wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', verbose_name='Write any additional content describing the service')),
                ('additional_content_ar', wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_en', wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_es', wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_vi', wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service')),
                ('short_description', models.TextField(blank=True, max_length=300, verbose_name='Write a description of this service')),
                ('short_description_ar', models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service')),
                ('short_description_en', models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service')),
                ('short_description_es', models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service')),
                ('short_description_vi', models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service')),
            ],
            options={
                'abstract': False,
            },
            bases=('topic_page.janisbasepagewithtopics',),
        ),
        migrations.CreateModel(
            name='ServicePageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='service_page.ServicePage')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
