# Generated by Django 2.2.12 on 2020-04-10 10:54

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contact', '0001_initial'),
        ('base_page', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('janisbasepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_page.JanisBasePage')),
                ('description', wagtail.core.fields.RichTextField(blank=True, help_text='Full description of the event', verbose_name='Description')),
                ('description_ar', wagtail.core.fields.RichTextField(blank=True, help_text='Full description of the event', null=True, verbose_name='Description')),
                ('description_en', wagtail.core.fields.RichTextField(blank=True, help_text='Full description of the event', null=True, verbose_name='Description')),
                ('description_es', wagtail.core.fields.RichTextField(blank=True, help_text='Full description of the event', null=True, verbose_name='Description')),
                ('description_vi', wagtail.core.fields.RichTextField(blank=True, help_text='Full description of the event', null=True, verbose_name='Description')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Event date')),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('location_blocks', wagtail.core.fields.StreamField([('city_location', wagtail.core.blocks.StructBlock([('location_page', wagtail.core.blocks.PageChooserBlock(classname='do-not-hide', label='Location', page_type=['location_page.LocationPage'])), ('additional_details_en', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [en]', required=False)), ('additional_details_es', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [es]', required=False)), ('additional_details_ar', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [ar]', required=False)), ('additional_details_vi', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [vi]', required=False))])), ('remote_location', wagtail.core.blocks.StructBlock([('name_en', wagtail.core.blocks.TextBlock(label='Name of venue [en]')), ('name_es', wagtail.core.blocks.TextBlock(label='Name of venue [es]', required=False)), ('name_ar', wagtail.core.blocks.TextBlock(label='Name of venue [ar]', required=False)), ('name_vi', wagtail.core.blocks.TextBlock(label='Name of venue [vi]', required=False)), ('street', wagtail.core.blocks.TextBlock(label='Street', required=False)), ('unit', wagtail.core.blocks.TextBlock(label='Unit', required=False)), ('city', wagtail.core.blocks.TextBlock(label='City', required=False)), ('state', wagtail.core.blocks.TextBlock(label='State', required=False)), ('zip', wagtail.core.blocks.TextBlock(label='ZIP', required=False)), ('additional_details_en', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [en]', required=False)), ('additional_details_es', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [es]', required=False)), ('additional_details_ar', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [ar]', required=False)), ('additional_details_vi', wagtail.core.blocks.TextBlock(label='Any other necessary location details, such as room number [vi]', required=False))]))])),
                ('event_is_free', models.BooleanField(default=True, verbose_name='This event is free')),
                ('registration_url', models.URLField(blank=True, help_text='The URL where the resident may register for the event, if needed', verbose_name='Registration')),
                ('canceled', models.BooleanField(default=False, help_text='Canceling an event will not unpublish it, but it will display the event as canceled.', verbose_name='Cancel this event')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='contact.Contact')),
            ],
            options={
                'abstract': False,
            },
            bases=('base_page.janisbasepage',),
        ),
        migrations.CreateModel(
            name='EventPageFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('fee_label', models.CharField(blank=True, max_length=255, verbose_name='Label (kids, adults, seniors, etc.)')),
                ('fee_label_ar', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label (kids, adults, seniors, etc.)')),
                ('fee_label_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label (kids, adults, seniors, etc.)')),
                ('fee_label_es', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label (kids, adults, seniors, etc.)')),
                ('fee_label_vi', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label (kids, adults, seniors, etc.)')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='fees', to='event_page.EventPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
