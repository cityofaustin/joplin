# Generated by Django 2.2.8 on 2020-01-22 19:34

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0004_auto_20200122_1859'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
    ]

    operations = [
        migrations.CreateModel(
            name='InfoInformationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
                ('coa_global', models.BooleanField(default=False, verbose_name='Make this a top level page')),
                ('description', models.TextField(blank=True, verbose_name='Write a description of this page')),
                ('options', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed', 'document-link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.')),
                ('additional_content', wagtail.core.fields.RichTextField(blank=True, verbose_name='Write any additional content describing the service')),
            ],
            options={
                'db_table': 'informations_informationpage',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InfoInformationPageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='informations.InfoInformationPage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'db_table': 'informations_informationpagetopic',
            },
        ),
        migrations.CreateModel(
            name='InfoInformationPageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='informations.InfoInformationPage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'db_table': 'informations_informationpagerelateddepartments',
            },
        ),
        migrations.CreateModel(
            name='InfoInformationPageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='informations.InfoInformationPage')),
            ],
            options={
                'db_table': 'informations_informationpagecontact',
            },
        ),
    ]
