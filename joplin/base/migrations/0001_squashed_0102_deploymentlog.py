# Generated by Django 2.2.8 on 2019-12-19 01:00
from __future__ import unicode_literals
import base.blocks
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import phonenumber_field.modelfields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.images.models
import wagtail.search.index
from pprint import pprint
from wagtail.core.blocks.stream_block import StreamValue


from django.db import migrations


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# base.migrations.0002_create_homepage
# base.migrations.0033_auto_20180927_0500

def create_homepage(apps, schema_editor):
    # Get models
    ContentType = apps.get_model('contenttypes.ContentType')
    Page = apps.get_model('wagtailcore.Page')
    Site = apps.get_model('wagtailcore.Site')
    HomePage = apps.get_model('base.HomePage')

    # Delete the default homepage
    # If migration is run multiple times, it may have already been deleted
    Page.objects.filter(id=2).delete()

    # Create content type for homepage model
    homepage_content_type, __ = ContentType.objects.get_or_create(
        model='homepage', app_label='base')

    # Create a new homepage
    homepage = HomePage.objects.create(
        title="Home",
        draft_title="Home",
        slug='home',
        content_type=homepage_content_type,
        path='00010001',
        depth=2,
        numchild=0,
        url_path='/home/',
    )

    # Create a site with the new homepage set as the root
    Site.objects.create(
        hostname='localhost', root_page=homepage, is_default_site=True)


def remove_homepage(apps, schema_editor):
    # Get models
    ContentType = apps.get_model('contenttypes.ContentType')
    HomePage = apps.get_model('home.HomePage')

    # Delete the default homepage
    # Page and Site objects CASCADE
    HomePage.objects.filter(slug='home', depth=2).delete()

    # Delete content type for homepage model
    ContentType.objects.filter(model='homepage', app_label='base').delete()


def better_steps(apps, schema_editor):
    '''
    We can't import the models directly as they may be a newer
    version than this migration expects. We use the historical versions.
    '''
    ServicePage = apps.get_model('base', 'ServicePage')
    ServicePageStep = apps.get_model('base', 'ServicePageStep')

    for page in ServicePage.objects.all():
        pageSteps = []
        for step in ServicePageStep.objects.all():
            if step.page_id == page.id:
                streamStep = {
                    'type': 'basic_step',
                    'value': step.step_description
                }
                pageSteps.append(streamStep)
        stream_block = page.steps.stream_block
        page.steps = StreamValue(stream_block, pageSteps, is_lazy=True)
        page.save()


class Migration(migrations.Migration):

    replaces = [('base', '0001_initial'), ('base', '0002_create_homepage'), ('base', '0003_auto_20171215_0117'), ('base', '0004_auto_20171228_1924'), ('base', '0005_auto_20180104_2048'), ('base', '0006_auto_20180105_0538'), ('base', '0007_department_departmentcontact'), ('base', '0008_servicepage_image'), ('base', '0009_department_image'), ('base', '0010_auto_20180123_1553'), ('base', '0011_auto_20180316_0229'), ('base', '0012_auto_20180316_2253'), ('base', '0013_delete_applicationblock'), ('base', '0014_auto_20180321_0132'), ('base', '0015_auto_20180323_2203'), ('base', '0016_auto_20180326_2118'), ('base', '0017_theme'), ('base', '0018_topic_theme'), ('base', '0019_auto_20180327_1543'), ('base', '0020_threeoneone'), ('base', '0021_auto_20180615_2118'), ('base', '0022_auto_20180628_1636'), ('base', '0023_processpagecontact'), ('base', '0024_auto_20180801_2204'), ('base', '0025_auto_20180816_0603'), ('base', '0026_auto_20180817_1107'), ('base', '0027_auto_20180822_0244'), ('base', '0025_auto_20180809_1810'), ('base', '0028_merge_20180827_2354'), ('base', '0029_auto_20180919_0355'), ('base', '0030_auto_20180921_0721'), ('base', '0031_auto_20180925_2309'), ('base', '0032_servicepage_steps'), ('base', '0033_auto_20180927_0500'), ('base', '0034_auto_20180927_0731'), ('base', '0035_auto_20181004_0428'), ('base', '0036_informationpage_informationpagecontact'), ('base', '0037_departmentpage_departmentpagecontact'), ('base', '0038_auto_20190207_0700'), ('base', '0039_auto_20190214_1458'), ('base', '0040_auto_20190214_1512'), ('base', '0041_auto_20190216_1256'), ('base', '0042_auto_20190313_1624'), ('base', '0043_auto_20190319_0618'), ('base', '0044_contact_social_media'), ('base', '0045_auto_20190321_0651'), ('base', '0046_auto_20190328_0209'), ('base', '0047_departmentpage_top_services'), ('base', '0048_auto_20190328_0945'), ('base', '0049_auto_20190328_0954'), ('base', '0050_auto_20190328_1156'), ('base', '0051_auto_20190403_1039'), ('base', '0052_topicpage'), ('base', '0051_auto_20190410_1344'), ('base', '0053_merge_20190411_1135'), ('base', '0054_auto_20190411_1237'), ('base', '0055_auto_20190411_1254'), ('base', '0056_auto_20190416_1234'), ('base', '0057_auto_20190416_2342'), ('base', '0058_auto_20190417_1839'), ('base', '0059_remove_servicepage_image'), ('base', '0060_remove_informationpage_image'), ('base', '0061_servicepage_short_description'), ('base', '0062_auto_20190510_0948'), ('base', '0063_auto_20190516_0319'), ('base', '0064_auto_20190516_0909'), ('base', '0065_auto_20190516_0911'), ('base', '0066_auto_20190522_0558'), ('base', '0067_auto_20190522_0840'), ('base', '0068_servicepage_department'), ('base', '0069_auto_20190604_1941'), ('base', '0070_auto_20190604_1944'), ('base', '0071_auto_20190604_2036'), ('base', '0072_auto_20190604_2045'), ('base', '0073_auto_20190604_2124'), ('base', '0069_auto_20190530_2220'), ('base', '0074_merge_20190606_2219'), ('base', '0075_auto_20190627_0829'), ('base', '0076_auto_20190710_2252'), ('base', '0077_informationpagerelateddepartments_servicepagerelateddepartments'), ('base', '0078_create_officialdocumentpage'), ('base', '0078_auto_20190727_1510'), ('base', '0079_merge_20190802_2254'), ('base', '0080_guidepage_guidepagecontact_guidepagerelateddepartments_guidepagetopic'), ('base', '0081_auto_20190807_1916'), ('base', '0082_phonenumber'), ('base', '0083_auto_20190828_0729'), ('base', '0084_remove_contact_phone'), ('base', '0085_auto_20190910_1903'), ('base', '0086_remove_topicpage_external_services'), ('base', '0087_auto_20190912_0845'), ('base', '0088_auto_20190925_1642'), ('base', '0089_auto_20190926_1115'), ('base', '0090_remove_officialdocumentpageofficialdocument_link'), ('base', '0091_officialdocumentpageofficialdocument_document'), ('base', '0092_auto_20191003_1358'), ('base', '0093_auto_20191008_2121'), ('base', '0093_auto_20191008_1555'), ('base', '0094_merge_20191015_2104'), ('base', '0093_janisbranchsettings'), ('base', '0095_merge_20191021_2137'), ('base', '0096_auto_20191022_2050'), ('base', '0097_formpage_formpagerelateddepartments_formpagetopic'), ('base', '0098_dayandduration_exceptions'), ('base', '0099_auto_20191121_1956'), ('base', '0100_auto_20191121_2000'), ('base', '0098_auto_20191127_1904'), ('base', '0099_auto_20191203_1807'), ('base', '0101_merge_20191205_2229'), ('base', '0102_deploymentlog')]

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('wagtaildocs', '0010_document_file_hash'),
        ('wagtailcore', '0040_page_draft_title'),
        ('wagtailimages', '0019_delete_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.RunPython(
            code=create_homepage,
            reverse_code=remove_homepage,
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DayAndDuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=20)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('street', models.TextField()),
                ('city', models.CharField(default='Austin', max_length=255)),
                ('state', models.CharField(choices=[('TX', 'Texas')], default='TX', max_length=2)),
                ('country', models.CharField(choices=[('United States', 'United States')], default='United States', max_length=100)),
                ('zip', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServicePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', wagtail.core.fields.RichTextField(verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_en', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_pt', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_es', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_fr', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('extra_content', wagtail.core.fields.StreamField([('content', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'link', 'ul', 'ol'], help_text='Write any additional content describing the service')), ('application_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.ApplicationBlock'))], verbose_name='Add any forms, maps, apps, or content that will help the resident use the service')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ServicePageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.ServicePage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('description', models.TextField(default='This is a bunch of text to describe this very important topic. Please enjoy it with friends.')),
                ('description_ar', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_vi', models.TextField(null=True)),
                ('slug', models.SlugField(default='topic')),
                ('text_ar', models.CharField(max_length=255, null=True)),
                ('text_en', models.CharField(max_length=255, null=True)),
                ('text_es', models.CharField(max_length=255, null=True)),
                ('text_vi', models.CharField(max_length=255, null=True)),
                ('call_to_action', models.TextField(blank=True)),
                ('call_to_action_ar', models.TextField(blank=True, null=True)),
                ('call_to_action_en', models.TextField(blank=True, null=True)),
                ('call_to_action_es', models.TextField(blank=True, null=True)),
                ('call_to_action_vi', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='servicepage',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='base.Topic'),
        ),
        migrations.AddField(
            model_name='contact',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.Location'),
        ),
        migrations.CreateModel(
            name='ContactDayAndDuration',
            fields=[
                ('dayandduration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.DayAndDuration')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('contact', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='hours', to='base.Contact')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
            bases=('base.dayandduration', models.Model),
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='content_fr',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='content_pt',
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('mission', models.TextField()),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('mission_ar', models.TextField(null=True)),
                ('mission_en', models.TextField(null=True)),
                ('mission_es', models.TextField(null=True)),
                ('mission_vi', models.TextField(null=True)),
                ('name_ar', models.CharField(max_length=255, null=True)),
                ('name_en', models.CharField(max_length=255, null=True)),
                ('name_es', models.CharField(max_length=255, null=True)),
                ('name_vi', models.CharField(max_length=255, null=True)),
                ('slug', models.SlugField(default='slug')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DepartmentContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('department', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.Department')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RenameField(
            model_name='servicepage',
            old_name='content',
            new_name='steps',
        ),
        migrations.RenameField(
            model_name='servicepage',
            old_name='content_en',
            new_name='steps_en',
        ),
        migrations.RenameField(
            model_name='servicepage',
            old_name='content_es',
            new_name='steps_es',
        ),
        migrations.RenameField(
            model_name='servicepage',
            old_name='extra_content',
            new_name='dynamic_content',
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='dynamic_content',
            field=wagtail.core.fields.StreamField([('content', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'link', 'ul', 'ol'], help_text='Write any additional content describing the service')), ('application_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.ApplicationBlock', icon='site')), ('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock())], verbose_name='Add any forms, maps, apps, or content that will help the resident use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='dynamic_content',
            field=wagtail.core.fields.StreamField([('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock())], verbose_name='Add any forms, maps, apps, or content that will help the resident use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='title_ar',
            field=models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='title_en',
            field=models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='title_es',
            field=models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='title_vi',
            field=models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.CreateModel(
            name='TranslatedImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('title_ar', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_en', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_es', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_vi', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name='homepage',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage'),
        ),
        migrations.AlterField(
            model_name='department',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage'),
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Location')),
                ('description_ar', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_vi', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='dynamic_content',
            field=wagtail.core.fields.StreamField([('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock()), ('recollect_block', base.blocks.RecollectBlock())], verbose_name='Add any forms, maps, apps, or content that will help the resident use the service'),
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField()),
                ('text', models.CharField(max_length=255)),
                ('text_ar', models.CharField(max_length=255, null=True)),
                ('text_en', models.CharField(max_length=255, null=True)),
                ('text_es', models.CharField(max_length=255, null=True)),
                ('text_vi', models.CharField(max_length=255, null=True)),
                ('description', models.TextField()),
                ('description_ar', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_vi', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='topics', to='base.Theme'),
        ),
        migrations.CreateModel(
            name='ThreeOneOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('title_ar', models.CharField(max_length=255, null=True)),
                ('title_en', models.CharField(max_length=255, null=True)),
                ('title_es', models.CharField(max_length=255, null=True)),
                ('title_vi', models.CharField(max_length=255, null=True)),
                ('url', models.URLField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_ar', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_es', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_vi', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True)),
                ('description_ar', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_vi', models.TextField(blank=True, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Topic', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TranslatedImageRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='renditions', to='base.TranslatedImage')),
            ],
            options={
                'unique_together': {('image', 'filter_spec', 'focal_point_key')},
            },
        ),
        migrations.CreateModel(
            name='ProcessPageStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=255)),
                ('title_ar', models.CharField(max_length=255, null=True)),
                ('title_en', models.CharField(max_length=255, null=True)),
                ('title_es', models.CharField(max_length=255, null=True)),
                ('title_vi', models.CharField(max_length=255, null=True)),
                ('short_title', models.CharField(max_length=255)),
                ('short_title_ar', models.CharField(max_length=255, null=True)),
                ('short_title_en', models.CharField(max_length=255, null=True)),
                ('short_title_es', models.CharField(max_length=255, null=True)),
                ('short_title_vi', models.CharField(max_length=255, null=True)),
                ('link_title', models.CharField(max_length=255)),
                ('link_title_ar', models.CharField(max_length=255, null=True)),
                ('link_title_en', models.CharField(max_length=255, null=True)),
                ('link_title_es', models.CharField(max_length=255, null=True)),
                ('link_title_vi', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(blank=True)),
                ('description_ar', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_vi', models.TextField(blank=True, null=True)),
                ('overview_steps', wagtail.core.fields.RichTextField(blank=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('overview_steps_ar', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('overview_steps_en', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('overview_steps_es', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('overview_steps_vi', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('detailed_content', wagtail.core.fields.RichTextField(blank=True, verbose_name='Write any detailed content describing the process')),
                ('detailed_content_ar', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any detailed content describing the process')),
                ('detailed_content_en', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any detailed content describing the process')),
                ('detailed_content_es', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any detailed content describing the process')),
                ('detailed_content_vi', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any detailed content describing the process')),
                ('quote', models.TextField(blank=True)),
                ('quote_ar', models.TextField(blank=True, null=True)),
                ('quote_en', models.TextField(blank=True, null=True)),
                ('quote_es', models.TextField(blank=True, null=True)),
                ('quote_vi', models.TextField(blank=True, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='process_steps', to='base.ProcessPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='steps',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='steps_en',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='steps_es',
        ),
        migrations.CreateModel(
            name='ProcessPageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('process', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.ProcessPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='dynamic_content',
            field=wagtail.core.fields.StreamField([('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock()), ('recollect_block', base.blocks.RecollectBlock())], verbose_name='Add any maps or apps that will help the resident use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage', verbose_name='Choose an image for the service banner'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='additional_content',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', verbose_name='Write any additional content describing the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='additional_content_ar',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='additional_content_en',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='additional_content_es',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='additional_content_vi',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.CreateModel(
            name='ServicePageStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('step_description', wagtail.core.fields.RichTextField(blank=True, verbose_name='Step description')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_steps', to='base.ServicePage')),
                ('step_description_ar', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Step description')),
                ('step_description_en', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Step description')),
                ('step_description_es', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Step description')),
                ('step_description_vi', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Step description')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='dynamic_content',
            field=wagtail.core.fields.StreamField([('map_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.Map', icon='site')), ('what_do_i_do_with_block', base.blocks.WhatDoIDoWithBlock()), ('collection_schedule_block', base.blocks.CollectionScheduleBlock()), ('recollect_block', base.blocks.RecollectBlock())], blank=True, verbose_name='Add any maps or apps that will help the resident use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='base.Topic', verbose_name='Select a Topic'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Topic', verbose_name='Select a Topic'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordian which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.RunPython(
            code=better_steps,
        ),
        migrations.DeleteModel(
            name='ServicePageStep',
        ),
        migrations.AlterField(
            model_name='processpagestep',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage'),
        ),
        migrations.CreateModel(
            name='InformationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('toplink', models.BooleanField(default=False, verbose_name='Make this page a top link on any service collection page for this topic')),
                ('description', models.TextField(blank=True, verbose_name='Write a description of this page')),
                ('options', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.')),
                ('additional_content', wagtail.core.fields.RichTextField(blank=True, verbose_name='Write any additional content describing the service')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Topic', verbose_name='Select a Topic')),
                ('additional_content_ar', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_en', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_es', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any additional content describing the service')),
                ('additional_content_vi', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Write any additional content describing the service')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Write a description of this page')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Write a description of this page')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Write a description of this page')),
                ('description_vi', models.TextField(blank=True, null=True, verbose_name='Write a description of this page')),
                ('options_ar', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.')),
                ('options_en', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.')),
                ('options_es', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.')),
                ('options_vi', wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InformationPageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.InformationPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DepartmentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('what_we_do', wagtail.core.fields.RichTextField(blank=True, verbose_name='What we do')),
                ('mission', models.TextField(verbose_name='Mission')),
                ('job_listings', models.URLField(blank=True, help_text='Link to a page with job listings.', verbose_name='Job listings url')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('mission_ar', models.TextField(null=True, verbose_name='Mission')),
                ('mission_en', models.TextField(null=True, verbose_name='Mission')),
                ('mission_es', models.TextField(null=True, verbose_name='Mission')),
                ('mission_vi', models.TextField(null=True, verbose_name='Mission')),
                ('what_we_do_ar', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='What we do')),
                ('what_we_do_en', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='What we do')),
                ('what_we_do_es', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='What we do')),
                ('what_we_do_vi', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='What we do')),
                ('top_services', wagtail.core.fields.StreamField([('link_en', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [EN]')), ('link_es', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [ES]')), ('link_ar', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [AR]')), ('link_vi', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [VI]'))], blank=True, verbose_name='Links to top services')),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DepartmentPageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='processpage',
            name='title_ar',
        ),
        migrations.RemoveField(
            model_name='processpage',
            name='title_en',
        ),
        migrations.RemoveField(
            model_name='processpage',
            name='title_es',
        ),
        migrations.RemoveField(
            model_name='processpage',
            name='title_vi',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='title_ar',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='title_en',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='title_es',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='title_vi',
        ),
        migrations.AddField(
            model_name='informationpage',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage', verbose_name='Select a Department'),
        ),
        migrations.AddField(
            model_name='processpage',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage', verbose_name='Select a Department'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AddField(
            model_name='contact',
            name='social_media',
            field=wagtail.core.fields.StreamField([('url', wagtail.core.blocks.URLBlock(label='Social media url'))], blank=True, help_text='For example: https://www.facebook.com/atxpoliceoversight/', verbose_name='Links to any social media pages'),
        ),
        migrations.CreateModel(
            name='DepartmentPageDirector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255)),
                ('about', models.TextField(blank=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='department_directors', to='base.DepartmentPage')),
                ('photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('about_ar', models.TextField(blank=True, null=True)),
                ('about_en', models.TextField(blank=True, null=True)),
                ('about_es', models.TextField(blank=True, null=True)),
                ('about_vi', models.TextField(blank=True, null=True)),
                ('title', models.CharField(default='Director', max_length=255)),
                ('title_ar', models.CharField(default='Director', max_length=255, null=True)),
                ('title_en', models.CharField(default='Director', max_length=255, null=True)),
                ('title_es', models.CharField(default='Director', max_length=255, null=True)),
                ('title_vi', models.CharField(default='Director', max_length=255, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='informationpage',
            name='topic',
        ),
        migrations.RemoveField(
            model_name='processpage',
            name='topic',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='topic',
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='translatedimagerendition',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='base.TranslatedImage'),
        ),
        migrations.CreateModel(
            name='TopicPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True)),
                ('description_ar', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_vi', models.TextField(blank=True, null=True)),
                ('external_services', wagtail.core.fields.StreamField([('link_en', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [EN]')), ('link_es', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [ES]')), ('link_ar', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [AR]')), ('link_vi', wagtail.core.blocks.StructBlock([('url', wagtail.core.blocks.URLBlock()), ('title', wagtail.core.blocks.CharBlock())], icon='link', label='Link [VI]'))], blank=True, verbose_name='External links to services')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InformationPageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.InformationPage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
                ('toplink', models.BooleanField(default=False, verbose_name='Make this page a top link for this topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessPageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.ProcessPage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServicePageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.ServicePage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
                ('toplink', models.BooleanField(default=False, verbose_name='Make this service a top link for this topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.DeleteModel(
            name='Topic',
        ),
        migrations.RemoveField(
            model_name='informationpage',
            name='toplink',
        ),
        migrations.CreateModel(
            name='TopicCollectionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True)),
                ('description_ar', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_vi', models.TextField(blank=True, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='topicCollectionPages', to='base.Theme')),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TopicCollectionPageTopicCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topiccollections', to='base.TopicCollectionPage')),
                ('topiccollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicCollectionPage', verbose_name='Select a Topic Collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TopicPageTopicCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topiccollections', to='base.TopicPage')),
                ('topiccollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicCollectionPage', verbose_name='Select a Topic Collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='image',
        ),
        migrations.RemoveField(
            model_name='informationpage',
            name='image',
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AddField(
            model_name='translatedimage',
            name='file_hash',
            field=models.CharField(blank=True, editable=False, max_length=40),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'h6'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'h6'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'h6'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'h6'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'h6'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AddField(
            model_name='informationpage',
            name='author_notes',
            field=wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)'),
        ),
        migrations.AddField(
            model_name='processpage',
            name='author_notes',
            field=wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='author_notes',
            field=wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage', verbose_name='Select a Department'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_ar',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_en',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_es',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_vi',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_ar',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_en',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_es',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_vi',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content',
            field=wagtail.core.fields.RichTextField(blank=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_ar',
            field=wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_en',
            field=wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_es',
            field=wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_vi',
            field=wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Additional content'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordian which reveals two or more options', verbose_name='Steps'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordian which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', verbose_name='Write any additional content describing the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_ar',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_en',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_es',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='additional_content_vi',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='Section header: What else do I need to know?', null=True, verbose_name='Write any additional content describing the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='short_description',
            field=models.TextField(blank=True, max_length=300, verbose_name='Write a description of this service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='short_description_ar',
            field=models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='short_description_en',
            field=models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='short_description_es',
            field=models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='short_description_vi',
            field=models.TextField(blank=True, max_length=300, null=True, verbose_name='Write a description of this service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordian which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='steps_ar',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='steps_en',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='steps_es',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='steps_vi',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.CreateModel(
            name='ServicePageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.ServicePage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InformationPageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.InformationPage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OfficialDocumentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
                ('description', models.TextField(blank=True)),
                ('description_ar', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('description_es', models.TextField(blank=True, null=True)),
                ('description_vi', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='OfficialDocumentPageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('toplink', models.BooleanField(default=False, verbose_name='Make this list a top link for this topic')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.OfficialDocumentPage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OfficialDocumentPageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.OfficialDocumentPage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OfficialDocumentPageOfficialDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('date', models.DateField(null=True, verbose_name='Document date')),
                ('title', models.CharField(max_length=255, verbose_name='Document title')),
                ('title_ar', models.CharField(max_length=255, null=True, verbose_name='Document title')),
                ('title_en', models.CharField(max_length=255, null=True, verbose_name='Document title')),
                ('title_es', models.CharField(max_length=255, null=True, verbose_name='Document title')),
                ('title_vi', models.CharField(max_length=255, null=True, verbose_name='Document title')),
                ('authoring_office', models.CharField(max_length=255, verbose_name='Authoring office of document')),
                ('authoring_office_ar', models.CharField(max_length=255, null=True, verbose_name='Authoring office of document')),
                ('authoring_office_en', models.CharField(max_length=255, null=True, verbose_name='Authoring office of document')),
                ('authoring_office_es', models.CharField(max_length=255, null=True, verbose_name='Authoring office of document')),
                ('authoring_office_vi', models.CharField(max_length=255, null=True, verbose_name='Authoring office of document')),
                ('summary', models.TextField(help_text='600 char limit', max_length=600, verbose_name='Document summary')),
                ('summary_ar', models.TextField(help_text='600 char limit', max_length=600, null=True, verbose_name='Document summary')),
                ('summary_en', models.TextField(help_text='600 char limit', max_length=600, null=True, verbose_name='Document summary')),
                ('summary_es', models.TextField(help_text='600 char limit', max_length=600, null=True, verbose_name='Document summary')),
                ('summary_vi', models.TextField(help_text='600 char limit', max_length=600, null=True, verbose_name='Document summary')),
                ('name', models.CharField(max_length=255, verbose_name='Name of Document')),
                ('name_ar', models.CharField(max_length=255, null=True, verbose_name='Name of Document')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='Name of Document')),
                ('name_es', models.CharField(max_length=255, null=True, verbose_name='Name of Document')),
                ('name_vi', models.CharField(max_length=255, null=True, verbose_name='Name of Document')),
                ('link', models.URLField(verbose_name='Link to Document (URL)')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='official_documents', to='base.OfficialDocumentPage')),
            ],
        ),
        migrations.AddIndex(
            model_name='officialdocumentpageofficialdocument',
            index=models.Index(fields=['-date'], name='base_offici_date_9cfd76_idx'),
        ),
        migrations.RemoveField(
            model_name='informationpage',
            name='department',
        ),
        migrations.RemoveField(
            model_name='servicepage',
            name='department',
        ),
        migrations.CreateModel(
            name='GuidePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
                ('description', models.TextField(blank=True, verbose_name='Write a description of the guide')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_vi', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('sections', wagtail.core.fields.StreamField([('section', wagtail.core.blocks.StructBlock([('section_heading_en', wagtail.core.blocks.TextBlock(label='Heading [en]')), ('section_heading_es', wagtail.core.blocks.TextBlock(label='Heading [es]', required=False)), ('section_heading_ar', wagtail.core.blocks.TextBlock(label='Heading [ar]', required=False)), ('section_heading_vi', wagtail.core.blocks.TextBlock(label='Heading [vi]', required=False)), ('pages', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Page', page_type=['base.InformationPage', 'base.ServicePage']), help_text='Select existing pages in the order you want them to display within each heading. Pages should be added only once to any single guide.'))], label='Section'))], blank=True, verbose_name='Add a section header and pages to each section')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
                ('coa_global', models.BooleanField(default=False, verbose_name='Make this a top level page')),
            ],
            options={
                'abstract': False,
                'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GuidePageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.GuidePage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuidePageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.GuidePage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuidePageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.GuidePage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_ar',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_en',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_es',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_vi',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.TextBlock('Describe the set of options')), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('phone_description', models.CharField(blank=True, max_length=255)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('contact', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_number', to='base.Contact')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='departmentpage',
            name='top_services',
        ),
        migrations.RemoveField(
            model_name='contact',
            name='phone',
        ),
        migrations.AlterField(
            model_name='officialdocumentpageofficialdocument',
            name='summary',
            field=models.TextField(verbose_name='Document summary'),
        ),
        migrations.AlterField(
            model_name='officialdocumentpageofficialdocument',
            name='summary_ar',
            field=models.TextField(null=True, verbose_name='Document summary'),
        ),
        migrations.AlterField(
            model_name='officialdocumentpageofficialdocument',
            name='summary_en',
            field=models.TextField(null=True, verbose_name='Document summary'),
        ),
        migrations.AlterField(
            model_name='officialdocumentpageofficialdocument',
            name='summary_es',
            field=models.TextField(null=True, verbose_name='Document summary'),
        ),
        migrations.AlterField(
            model_name='officialdocumentpageofficialdocument',
            name='summary_vi',
            field=models.TextField(null=True, verbose_name='Document summary'),
        ),
        migrations.RemoveField(
            model_name='topicpage',
            name='external_services',
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_ar',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_en',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_es',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_vi',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'ol', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AddField(
            model_name='departmentpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='informationpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='officialdocumentpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='processpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='topiccollectionpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.AddField(
            model_name='topicpage',
            name='coa_global',
            field=models.BooleanField(default=False, verbose_name='Make this a top level page'),
        ),
        migrations.RemoveField(
            model_name='officialdocumentpageofficialdocument',
            name='link',
        ),
        migrations.AddField(
            model_name='officialdocumentpageofficialdocument',
            name='document',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document'),
        ),
        migrations.CreateModel(
            name='DepartmentPageRelatedPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('department', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_pages', to='base.DepartmentPage')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Page', verbose_name='Select a page')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DepartmentPageTopPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('department', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='top_pages', to='base.DepartmentPage')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Page', verbose_name='Select a page')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='contact',
            name='email',
            field=models.EmailField(blank=True, max_length=254),
        ),
        migrations.AlterField(
            model_name='departmentpage',
            name='mission',
            field=models.TextField(blank=True, verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='departmentpage',
            name='mission_ar',
            field=models.TextField(blank=True, null=True, verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='departmentpage',
            name='mission_en',
            field=models.TextField(blank=True, null=True, verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='departmentpage',
            name='mission_es',
            field=models.TextField(blank=True, null=True, verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='departmentpage',
            name='mission_vi',
            field=models.TextField(blank=True, null=True, verbose_name='Mission'),
        ),
        migrations.CreateModel(
            name='JanisBranchSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview_input', models.CharField(choices=[('url', 'Url'), ('branch_name', 'Branch Name')], default='url', max_length=11, verbose_name='Preview Input Options')),
                ('preview_janis_url', models.URLField(blank=True, help_text='Url of deployed Janis branch to preview pages. Ex: "https://janis.austintexas.io", "localhost:3000" (Don\'t add quotes)', null=True, verbose_name='Preview Janis URL')),
                ('preview_janis_branch', models.TextField(blank=True, help_text='Name of Janis branch to preview pages. Ex: "3000-my-issue-name" (Don\'t add quotes)', null=True, verbose_name='Preview Janis Branch Name')),
                ('publish_janis_branch', models.TextField(blank=True, help_text='Name of Janis branch you want to publish to. Ex: "3000-my-issue-name" (Don\'t add quotes)', null=True, verbose_name='Publish Janis Branch Name')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='informationpagetopic',
            name='toplink',
        ),
        migrations.RemoveField(
            model_name='officialdocumentpagetopic',
            name='toplink',
        ),
        migrations.RemoveField(
            model_name='servicepagetopic',
            name='toplink',
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.CreateModel(
            name='TopicPageTopPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Page', verbose_name='Select a page')),
                ('topic', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='top_pages', to='base.TopicPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contact',
            name='hours_exceptions',
            field=models.TextField(blank=True, max_length=255),
        ),
        migrations.CreateModel(
            name='FormContainer',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
                ('coa_global', models.BooleanField(default=False, verbose_name='Make this a top level page')),
                ('description', models.TextField(blank=True, verbose_name='Form description')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Form description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Form description')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Form description')),
                ('description_vi', models.TextField(blank=True, null=True, verbose_name='Form description')),
                ('form_url', models.URLField(blank=True, help_text='This link can be found under Share > "Link to this form on your website or email:"', verbose_name='Enter the URL of your Formstack form')),
                ('form_url_ar', models.URLField(blank=True, help_text='This link can be found under Share > "Link to this form on your website or email:"', null=True, verbose_name='Enter the URL of your Formstack form')),
                ('form_url_en', models.URLField(blank=True, help_text='This link can be found under Share > "Link to this form on your website or email:"', null=True, verbose_name='Enter the URL of your Formstack form')),
                ('form_url_es', models.URLField(blank=True, help_text='This link can be found under Share > "Link to this form on your website or email:"', null=True, verbose_name='Enter the URL of your Formstack form')),
                ('form_url_vi', models.URLField(blank=True, help_text='This link can be found under Share > "Link to this form on your website or email:"', null=True, verbose_name='Enter the URL of your Formstack form')),
            ],
            options={
                'abstract': False,
                'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FormContainerRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.FormContainer')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormContainerTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.FormContainer')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_ar',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_en',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_es',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='informationpage',
            name='options_vi',
            field=wagtail.core.fields.StreamField([('option', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'link', 'ul', 'ol', 'code', 'embed'], label='Option'))], blank=True, help_text='Options are needed when the reader needs to make a choice between a few options, such as ways to fill out a form (online, by phone, in person, etc.).', null=True, verbose_name='Add option sections as needed.'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_ar',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_en',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_es',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterField(
            model_name='servicepage',
            name='steps_vi',
            field=wagtail.core.fields.StreamField([('basic_step', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Basic Step')), ('step_with_options_accordian', wagtail.core.blocks.StructBlock([('options_description', wagtail.core.blocks.RichTextBlock(classname='coa-option-description', features=['ul', 'link', 'code', 'rich-text-button-link'])), ('options', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('option_name', wagtail.core.blocks.TextBlock(label='Option name. (When clicked, this name will expand the content for this option')), ('option_description', wagtail.core.blocks.RichTextBlock(features=['ul', 'link', 'code', 'rich-text-button-link'], label='Option Content'))])))], label='Step With Options'))], blank=True, help_text='A step may have a basic text step or an options accordion which reveals two or more options', null=True, verbose_name='Write out the steps a resident needs to take to use the service'),
        ),
        migrations.AlterModelOptions(
            name='departmentpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='informationpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='officialdocumentpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='processpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='servicepage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='topiccollectionpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.AlterModelOptions(
            name='topicpage',
            options={'permissions': [('view_extra_panels', 'Can view extra panels'), ('view_snippets', 'Can view snippets'), ('add_snippets', 'Can add snippet'), ('delete_snippets', 'Can delete snippet')]},
        ),
        migrations.CreateModel(
            name='DeploymentLog',
            fields=[
                ('operation', models.CharField(db_index=True, max_length=256, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=256, null=True)),
                ('completed', models.BooleanField(blank=True, null=True)),
            ],
        ),
    ]
