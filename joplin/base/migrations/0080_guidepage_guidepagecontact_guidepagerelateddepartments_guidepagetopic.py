# Generated by Django 2.2.3 on 2019-08-05 23:32

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('base', '0079_merge_20190802_2254'),
    ]

    operations = [
        migrations.CreateModel(
            name='GuidePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_notes', wagtail.core.fields.RichTextField(blank=True, verbose_name='Notes for authors (Not visible on the resident facing site)')),
                ('description', models.TextField(blank=True, verbose_name='Write a description of the guide')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('description_vi', models.TextField(blank=True, null=True, verbose_name='Write a description of the guide')),
                ('sections', wagtail.core.fields.StreamField([('section', wagtail.core.blocks.StructBlock([('section_heading', wagtail.core.blocks.TextBlock('Heading')), ('pages', wagtail.core.blocks.ListBlock(wagtail.core.blocks.PageChooserBlock(label='Page', page_type=['base.InformationPage', 'base.ServicePage']), help_text='Select existing pages in the order you want them to display within each heading. Pages should be added only once to any single guide.'))], label='Section'))], blank=True, verbose_name='Add a section header and pages to each section')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.TranslatedImage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GuidePageTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('toplink', models.BooleanField(default=False, verbose_name='Make this page a top link for this topic')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='base.GuidePage')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.TopicPage', verbose_name='Select a Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuidePageRelatedDepartments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='related_departments', to='base.GuidePage')),
                ('related_department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.DepartmentPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuidePageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.GuidePage')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
