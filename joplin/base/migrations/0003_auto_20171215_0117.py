# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2017-12-15 01:17
from __future__ import unicode_literals

import base.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('base', '0002_create_homepage'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('description', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DayAndDuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=20)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('street', models.TextField()),
                ('city', models.CharField(default='Austin', max_length=255)),
                ('state', models.CharField(choices=[('TX', 'Texas')], default='TX', max_length=2)),
                ('country', models.CharField(choices=[('United States', 'United States')], default='United States', max_length=100)),
                ('zip', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServicePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', wagtail.core.fields.RichTextField(verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_en', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_pt', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_es', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('content_fr', wagtail.core.fields.RichTextField(null=True, verbose_name='Write out the steps a resident needs to take to use the service')),
                ('extra_content', wagtail.core.fields.StreamField((('content', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'link', 'ul', 'ol'], help_text='Write any additional content describing the service')), ('application_block', base.blocks.SnippetChooserBlockWithAPIGoodness('base.ApplicationBlock'))), verbose_name='Add any forms, maps, apps, or content that will help the resident use the service')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ServicePageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Contact')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='base.ServicePage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServicePageLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Location')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='base.ServicePage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationDayAndDuration',
            fields=[
                ('dayandduration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.DayAndDuration')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('location', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='hours', to='base.Location')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
            bases=('base.dayandduration', models.Model),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.Topic'),
        ),
    ]
